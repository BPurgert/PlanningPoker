@page "/poker/{group}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Concurrent
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>

<div class="container">
    <div class="row">
        <div class="col">
            <SfCard ID="card3" @onclick='() => SendVote("3")'>
                <CardFooter>
                    <CardFooterContent>
                        <div class=cardtopleft>3</div>
                        <div class=cardcenter>#</div>
                        <div class=cardbottomright>3</div>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
        <div class="col">
            <SfCard ID="card5" @onclick='() => SendVote("5")'>
                <CardContent>

                </CardContent>
            </SfCard>
        </div>
        <div class="col">
            <SfCard ID="card8" @onclick='() => SendVote("8")'>
                <CardHeader Title="8" />
            </SfCard>
        </div>
    </div>
</div>

<button @onclick="Show" disabled="@(!IsConnected)">Show</button>
<button @onclick="Reset" disabled="@(!IsConnected)">Reset</button>

<hr>


<ul id="messagesList">
    @foreach (var kvp in votes.OrderBy(x => x.Key))
    {
        string item;

        if (showResults)
        {
            item = $"{kvp.Key.Split("|").FirstOrDefault()}: {kvp.Value}";
        }
        else
        {
            item = $"{kvp.Key.Split("|").FirstOrDefault()} ✔";
        }
        <li>@item</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private ConcurrentDictionary<string, string> votes = new();
    private string? userInput;
    private string? messageInput;
    private string? userIdSuffix;
    private bool showResults = false;
    private string myVote = string.Empty;

    [Parameter]
    public string Group { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await SetUserIdSuffix();
        await ConnectToHub();
    }

    private async Task SetUserIdSuffix()
    {
        Random r = new Random();
        userIdSuffix = r.Next(10000, 99999).ToString();
    }

    private async void SendVote(string vote)
    {
        if (hubConnection is not null)
        {
            string userWithSuffix = $"{userInput}|{userIdSuffix}";
            await hubConnection.SendAsync("SendMessage", userWithSuffix, vote, Group);
        }
    }

    private async Task ConnectToHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pokerhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            if (user.Equals($"{userInput}|{userIdSuffix}", StringComparison.CurrentCultureIgnoreCase))
            {
                myVote = $"My vote: {message}";
                StateHasChanged();
            }
            votes.AddOrUpdate(key: user, addValue: message, updateValueFactory: (key, oldValue) => message);
            StateHasChanged();
        });

        hubConnection.On("ShowResults", () =>
        {
            showResults = true;
            StateHasChanged();
        });

        hubConnection.On("Reset", () =>
        {
            showResults = false;
            myVote = string.Empty;
            votes.Clear();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("AddToGroup", Group);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            string userWithSuffix = $"{userInput}|{userIdSuffix}";
            await hubConnection.SendAsync("SendMessage", userWithSuffix, messageInput, Group);
        }
    }

    private async Task Show()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ShowResults", Group);
        }
    }

    private async Task Reset()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Reset", Group);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public override bool Equals(object obj)
    {
        return obj is Poker poker &&
               Group == poker.Group;
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(Group);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
.cardtopleft {
  position: absolute;
  top: 8px;
  left: 16px;
  font-size: 18px;
}

.cardbottomright {
  position: absolute;
  bottom: 8px;
  right: 16px;
  font-size: 18px;
}

.cardcenter {
  position: absolute;
  top: 50%;
  width: 100%;
  text-align: center;
  font-size: 18px;
}
</style>